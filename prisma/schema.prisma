generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id               String       @id @default(cuid())
  email            String       @unique
  organizationId   String
  token            String       @unique @default(cuid())
  expires          DateTime
  createdAt        DateTime     @default(now())
  acceptedByUserId String?
  invitedBy        String?
  usedAt           DateTime?
  usedByIp         String?
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  password       String?
  image          String?
  emailVerified  DateTime?
  role           UserRole         @default(USER)
  jobTitle       String?
  department     String?
  companySize    String?
  primaryUseCase String?
  phone          String?
  linkedIn       String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  company        String?
  accounts       Account[]
  executions     AgentExecution[]
  agents         Agent[]
  reports        Report[]
  sessions       Session[]
  apiKeys        UserApiKey[]
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Agent {
  id             String           @id @default(cuid())
  name           String
  description    String?
  category       String           @default("general")
  version        String           @default("1.0.0")
  isPublic       Boolean          @default(false)
  isTemplate     Boolean          @default(false)
  tags           String[]
  metadata       Json?
  nodes          Json
  edges          Json
  inputSchema    Json?
  outputSchema   Json?
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  executions     AgentExecution[]
  templates      AgentTemplate[]
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports        Report[]

  @@map("agents")
}

model AgentTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String
  difficulty    String   @default("beginner")
  tags          String[]
  nodes         Json
  edges         Json
  inputSchema   Json?
  outputSchema  Json?
  usageCount    Int      @default(0)
  sourceAgentId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sourceAgent   Agent?   @relation(fields: [sourceAgentId], references: [id])

  @@map("agent_templates")
}

model AgentExecution {
  id             String          @id @default(cuid())
  executionId    String          @unique
  agentId        String
  userId         String
  status         ExecutionStatus @default(PENDING)
  priority       Int             @default(0)
  inputData      Json
  outputData     Json?
  errorMessage   String?
  executionTime  Int?
  tokensUsed     Int             @default(0)
  cost           Float           @default(0.0)
  jobId          String?
  queuedAt       DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  metadata       Json?
  logs           String[]        @default([])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  agent          Agent           @relation(fields: [agentId], references: [id], onDelete: Cascade)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("agent_executions")
}

model UserApiKey {
  id             String       @id @default(cuid())
  userId         String
  provider       AIProvider
  keyName        String
  encryptedKey   String
  isActive       Boolean      @default(true)
  lastUsed       DateTime?
  usageCount     Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, keyName])
  @@map("user_api_keys")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String   @default("general")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String?
  resourceId String?
  ipAddress  String?
  userAgent  String?
  oldValues  Json?
  newValues  Json?
  details    Json?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

model FileUpload {
  id             String       @id @default(cuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  path           String
  status         FileStatus   @default(UPLOADED)
  processedAt    DateTime?
  metadata       Json?
  userId         String?
  executionId    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("file_uploads")
}

model UsageMetrics {
  id                   String   @id @default(cuid())
  date                 DateTime @unique @db.Date
  activeUsers          Int      @default(0)
  newUsers             Int      @default(0)
  agentsCreated        Int      @default(0)
  agentsExecuted       Int      @default(0)
  templatesUsed        Int      @default(0)
  totalExecutions      Int      @default(0)
  successfulExecutions Int      @default(0)
  failedExecutions     Int      @default(0)
  avgExecutionTime     Float    @default(0.0)
  totalTokensUsed      Int      @default(0)
  totalCost            Float    @default(0.0)
  avgResponseTime      Float    @default(0.0)
  errorRate            Float    @default(0.0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("usage_metrics")
}

model Report {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  agentId        String
  executionId    String
  agentName      String
  timestamp      DateTime     @default(now())
  type           String
  result         Json
  fileName       String?
  fileSize       Int?
  fileType       String?
  filePath       String?
  status         String       @default("success")
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  agent          Agent        @relation(fields: [agentId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Organization {
  id          String           @id @default(cuid())
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  invitations Invitation[]
  executions  AgentExecution[]
  agents      Agent[]
  files       FileUpload[]
  reports     Report[]
  apiKeys     UserApiKey[]
  users       User[]

  @@map("organizations")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  VIEWER
}

enum ExecutionStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}
